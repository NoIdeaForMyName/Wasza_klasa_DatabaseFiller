import records_nb
from faker import Faker
import random
from datetime import datetime

SEED = 43

Faker.seed(SEED)
fake = Faker()

date_format = '%Y-%m-%d'

# PROFILES

def profiles():
    data = []
    faiths = [
        "Christianity",
        "Islam",
        "Hinduism",
        "Buddhism",
        "Judaism",
        "Sikhism",
        "Baha'i Faith",
        "Jainism",
        "Shinto",
        "Taoism",
        "Zoroastrianism",
        "Confucianism",
        "Paganism",
        "Unitarian Universalism",
        "Rastafarianism"
    ]

    prev_emails = set()

    for i in range(records_nb.PROFILES):
        email = fake.email()
        while email in prev_emails:
            email = fake.email()
        prev_emails.add(email)
        row = {
            'ID': i,
            'Name': fake.first_name(),
            'Surname': fake.last_name(),
            'Description': fake.text(max_nb_chars=5000),
            'Birthday': fake.date_of_birth(minimum_age=13).strftime(date_format),
            'DateOfCreation': fake.date_this_century().strftime(date_format),
            'Sex': random.choice(["K","M"]),
            'Faith': random.choice(faiths),
            'Email': email,
            'Password': fake.password(),
            'IsActive': True if abs(random.gauss(0, 1)) < 1.8 else False
        }
        data.append(row)
    return data


# CHATS
def chats(): # date of chat start moze byc starsza niz data zalozenia ktoregos konta (mozna poustalac przedzialy na wszystko, np. konta zalozone maks do 2020 roku itp. ale nie wiem czy tak moze byc - najprosciej by bylo)
    data = []
    send_receiv_check = set()
    for i in range(records_nb.CHATS):
        sender, receiver = random.sample(range(records_nb.PROFILES), 2)
        pair = frozenset((sender, receiver))
        while pair in send_receiv_check:
            sender, receiver = random.sample(range(records_nb.PROFILES), 2)
            pair = frozenset((sender, receiver))
        send_receiv_check.add(pair)
        row = {
            'ID': i,
            'FK_Sender': sender,
            'FK_Receiver': receiver,
            'DateOfChatStart': fake.date_this_century().strftime(date_format)
        }
        data.append(row)
    return data


# FRIENDSHIPS
def friendships(): # DateOfFriendshipStart moze byc starsza niz data zalozenia ktoregos konta
    data = []
    invit_receiv_check = set()
    for i in range(records_nb.FRIENDSHIPS):
        inviter, receiver = random.sample(range(records_nb.PROFILES), 2)
        pair = frozenset((inviter, receiver))
        while pair in invit_receiv_check:
            inviter, receiver = random.sample(range(records_nb.PROFILES), 2)
            pair = frozenset((inviter, receiver))
        invit_receiv_check.add(pair)
        row = {
            'ID': i,
            'FK_FriendshipInviter': inviter,
            'FK_FriendshipReceiver': receiver,
            'DateOfFriendshipStart': fake.date_this_century().strftime(date_format)
        }
        data.append(row)
    return data


# GROUPS
def groups():
    data = []
    for i in range(records_nb.GROUPS):
        row = {
            'ID': i,
            'Name': fake.text(max_nb_chars=20)[:-1]
        }
        data.append(row)
    return data
'''
CREATE TABLE Groups (
    ID      INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    Name    TEXT CHECK (LENGTH(Name) > 1),
    PRIMARY KEY (ID)
);
'''

# POSTS


# COMMENTS


# TYPES


# REACTIONS


# ROOMS


# ROLES


# PARTICIPATIONS


# NOTIFICATIONS


# ALBUMS


# EXTENSIONS


# MEDIA


# PUBLICATIONS


# SHARES


# PERMISSIONS


# AFFILIATIONS


# MESSAGES


def main():
    pass

if __name__ == "__main__":
    main()
