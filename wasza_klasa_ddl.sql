-- Tabela: Profiles
CREATE TABLE Profiles (
    ID              INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    Name            VARCHAR(30) CHECK (LENGTH(Name) > 1),
    Surname         VARCHAR(50) CHECK (LENGTH(Surname) > 1),
    Description     VARCHAR(5000),
    Birthday        DATE CHECK (Birthday < (CURRENT_DATE - INTERVAL '13 years')),
    DateOfCreation  DATE DEFAULT CURRENT_DATE CHECK (DateOfCreation <= CURRENT_DATE),
    Sex             VARCHAR(1) CHECK (Sex IN ('K', 'M')),
    Faith           VARCHAR(30),
	Email           VARCHAR(40) UNIQUE NOT NULL CHECK (POSITION('@' IN Email) > 1),
    Password        VARCHAR(30) NOT NULL CHECK (LENGTH(Password) >= 8),
	IsActive		BOOLEAN DEFAULT TRUE,
    PRIMARY KEY (ID)
);

-- Tabela: Chats
CREATE TABLE Chats (
    ID                  INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    FK_Sender           INTEGER NOT NULL,
    FK_Receiver         INTEGER NOT NULL,
    DateOfChatStart     DATE DEFAULT CURRENT_DATE CHECK (DateOfChatStart <= CURRENT_DATE),
    PRIMARY KEY (ID),
    FOREIGN KEY (FK_Sender) REFERENCES Profiles(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_Receiver) REFERENCES Profiles(ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabela: Friendships
CREATE TABLE Friendships (
    ID                      INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    FK_FriendshipInviter    INTEGER NOT NULL,
    FK_FriendshipReceiver   INTEGER NOT NULL,
    DateOfFriendshipStart   DATE DEFAULT CURRENT_DATE CHECK (DateOfFriendshipStart <= CURRENT_DATE),
    PRIMARY KEY (ID),
    FOREIGN KEY (FK_FriendshipInviter) REFERENCES Profiles(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_FriendshipReceiver) REFERENCES Profiles(ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- Tabela: Groups
CREATE TABLE Groups (
    ID      INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    Name    TEXT CHECK (LENGTH(Name) > 1),
    PRIMARY KEY (ID)
);


-- Tabela: Posts
CREATE TABLE Posts (
    ID                  INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    FK_Author           INTEGER NOT NULL,
    FK_Group            INTEGER,
    Content             VARCHAR(20000) CHECK (LENGTH(Content) > 0),
    DateOfPublication   DATE DEFAULT CURRENT_DATE CHECK (DateOfPublication <= CURRENT_DATE),
    PRIMARY KEY (ID),
    FOREIGN KEY (FK_Author) REFERENCES Profiles(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_Group) REFERENCES Groups(ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- Tabela: Comments
CREATE TABLE Comments (
    ID                  INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    FK_CommentProfile   INTEGER NOT NULL,
    FK_CommentedPost    INTEGER NOT NULL,
    Content             VARCHAR(5000) CHECK (LENGTH(Content) > 0),
    PRIMARY KEY (ID),
    FOREIGN KEY (FK_CommentProfile) REFERENCES Profiles(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_CommentedPost) REFERENCES Posts(ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabela: Types
CREATE TABLE Types (
    ID                  INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    Name                VARCHAR(10) CHECK (LENGTH(Name) > 1),
    PRIMARY KEY (ID)
);

-- Tabela: Reactions
CREATE TABLE Reactions (
    ID                  INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    FK_ReactionProfile  INTEGER NOT NULL,
    FK_ReactionPost     INTEGER NOT NULL,
    FK_ReactionType     INTEGER NOT NULL DEFAULT 1, --1 TO MUSI BYC LIKE
    DateOfReaction      DATE DEFAULT CURRENT_DATE CHECK (DateOfReaction <= CURRENT_DATE),
    PRIMARY KEY (ID),
    FOREIGN KEY (FK_ReactionProfile) REFERENCES Profiles(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_ReactionPost) REFERENCES Posts(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_ReactionType) REFERENCES Types(ID) ON DELETE SET DEFAULT ON UPDATE CASCADE
);



-- Tabela: Rooms
CREATE TABLE Rooms (
    ID                  INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    Name                VARCHAR(50) CHECK (LENGTH(Name) > 1),
	IsActive			BOOLEAN DEFAULT TRUE,
    PRIMARY KEY (ID)
);

-- Tabela: Roles
CREATE TABLE Roles (
    ID      INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    Name    VARCHAR(20) CHECK (LENGTH(Name) > 1),
    PRIMARY KEY (ID)
);

-- Tabela: Participations
CREATE TABLE Participations (
    ID                      INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    FK_Room                 INTEGER NOT NULL,
    FK_ParticipantProfile   INTEGER NOT NULL,
    FK_Role                 INTEGER NOT NULL DEFAULT 1, -- 1 OZNACZA BASIC ROLE JAKKOLWIEK JA NAZWIEMY
    DateOfParticipationStart DATE DEFAULT CURRENT_DATE CHECK (DateOfParticipationStart <= CURRENT_DATE),
	DateOfParticipationEnd   DATE DEFAULT CURRENT_DATE CHECK (DateOfParticipationStart <= DateOfParticipationEnd),
    PRIMARY KEY (ID),
    FOREIGN KEY (FK_Room) REFERENCES Rooms(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_ParticipantProfile) REFERENCES Profiles(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_Role) REFERENCES Roles(ID) ON DELETE SET DEFAULT ON UPDATE CASCADE
);

-- Tabela: Notifications
CREATE TABLE Notifications (
    ID              INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    Content         VARCHAR(1000) CHECK (LENGTH(Content) > 0),
    FK_Profile      INTEGER,
    PRIMARY KEY (ID),
    FOREIGN KEY (FK_Profile) REFERENCES Profiles(ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabela: Albums
CREATE TABLE Albums (
    ID              INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    Name            VARCHAR(50) CHECK (LENGTH(Name) > 1),
    FK_Profile      INTEGER NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (FK_Profile) REFERENCES Profiles(ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabela: Extensions
CREATE TABLE Extensions (
    ID              INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    Name            VARCHAR(5) CHECK (LENGTH(Name) > 1),
    PRIMARY KEY (ID)
);


-- Tabela: Media
CREATE TABLE Media (
    ID              INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    PathToResource  VARCHAR(500) CHECK (LENGTH(PathToResource) > 5), -- PANIE MARCINIE CZY TO MA SENS?
    Size            INTEGER CHECK (Size > 0),
    FK_Extension    INTEGER NOT NULL,
    FK_Album        INTEGER,
    PRIMARY KEY (ID),
    FOREIGN KEY  (FK_Extension) REFERENCES Extensions(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_Album) REFERENCES Albums(ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- Tabela: Publications
CREATE TABLE Publications (
    ID              INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    FK_Media        INTEGER NOT NULL,
    FK_Post         INTEGER NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (FK_Media) REFERENCES Media(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_Post) REFERENCES Posts(ID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Tabela: Shares
CREATE TABLE Shares (
    ID              INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    FK_Profile      INTEGER NOT NULL,
    FK_Post         INTEGER NOT NULL,
    DateOfSharing   DATE DEFAULT CURRENT_DATE CHECK (DateOfSharing <= CURRENT_DATE), --MOZNA TU DODAC KIEDYS DATEOFSHARING >= DATE OF PUBLICATION POST NIE
    PRIMARY KEY (ID),
    FOREIGN KEY (FK_Profile) REFERENCES Profiles(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_Post) REFERENCES Posts(ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- Tabela: Permissions
CREATE TABLE Permissions (
    ID      INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    Name    VARCHAR(20) CHECK (LENGTH(Name) > 1),
    PRIMARY KEY (ID)
);


-- Tabela: Affiliations
CREATE TABLE Affiliations (
    ID              INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    FK_Profile      INTEGER NOT NULL,
    FK_Group        INTEGER NOT NULL,
    DateOfJoining   DATE DEFAULT CURRENT_DATE CHECK (DateOfJoining <= CURRENT_DATE),
	DateOfLeaving   DATE DEFAULT CURRENT_DATE CHECK (DateOfJoining <= DateOfLeaving),
    FK_Permission   INTEGER DEFAULT 1, --1 to znaczy zwykly uzytkownik
    PRIMARY KEY (ID),
    FOREIGN KEY (FK_Profile) REFERENCES Profiles(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_Group) REFERENCES Groups(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_Permission) REFERENCES Permissions(ID) ON DELETE SET DEFAULT ON UPDATE CASCADE
);



-- Tabela: Messages
CREATE TABLE Messages (
    ID              INTEGER NOT NULL UNIQUE GENERATED BY DEFAULT AS IDENTITY,
    FK_Sender       INTEGER NOT NULL,
    FK_Chat         INTEGER,
    FK_Room         INTEGER,
    FK_Media        INTEGER,
    Content         VARCHAR(5000) CHECK (LENGTH(Content) > 0),
    Date            DATE DEFAULT CURRENT_DATE CHECK (Date <= CURRENT_DATE),
    PRIMARY KEY (ID),
    FOREIGN KEY (FK_Sender) REFERENCES Profiles(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_Chat) REFERENCES Chats(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_Room) REFERENCES Rooms(ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (FK_Media) REFERENCES Media(ID) ON DELETE SET NULL ON UPDATE CASCADE
);



